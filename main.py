"""
Ход мыслей:
раз поле бесконечное, и надо найти все значения, значит, есть какие-то ограничения. Я решил отобразить массив 2000х2000,
перебрав его элементы. Заметил, что стоит рассматривать только четверть [1000:2000][1000:2000], поэтому в дальнейших
расчётах считал недоступные места, начиная с индексов 999.
Недоступные места я отмечаю единицей.

Увидел закономерность, что имеет смысл у каждого 10 элемента проверять: недоступен ли одновременно "верхний" и "левый"
элемент над ними. если недоступны, значит и в этот "квадрат", муравей зайти не сможет. Значит, его можно "закрашивать".

Из количества клеток вычту закрашенные - получу количество клеток, которые может посетить муравей.
"""

import numpy as np
import matplotlib.pyplot as plt

# метод для подсчёта сумм цифр
def sum_the_digits(n):
    sum = 0
    while n != 0:
        sum = sum + (n % 10)
        n = n // 10
    return sum

x = 2000
y = 2000

# перебор всех элементов массива и проверка, доступны ли они. Наверняка, можно это сделать элегантнее.
field = np.zeros((x,y))
for i in range (999,x):
    for j in range (999,y):
        if sum_the_digits(i) + sum_the_digits(j) > 25:
            field[i][j] = 1

# отрисовка поля.
plt.imshow(field, interpolation="nearest", origin="upper")
plt.colorbar()
plt.show()


sub_field = field[1000:2000,1000:2000].copy()

# перебор каждого 10го элемента в "правой нижней" четверти и проверка, не заблокированы "верхний" и "левый" элементы
# если да, то этот квадрат "закрашивается"
for i in range (0, 1000, 10):
    for j in range (0, 1000, 10):
        if  (sub_field[i-1,j] == sub_field[i,j-1] == 1) and not (i==j==0):
            sub_field[i:i+10, j:j+10] = 1

# графическое отображение доступных(0) и недоступных (клеток)
plt.imshow(sub_field, interpolation="nearest", origin="upper")
plt.colorbar()
plt.show()

blocked_fields = int(np.sum(sub_field)) # сумма всех заблокированных клеток.
print(1000*1000-blocked_fields) # подсчёт оставшихся клеток